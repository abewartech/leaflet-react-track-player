import React from "react"
import ReactDOM from 'react-dom';
import moment from "moment";
import L from 'leaflet';
import { MapControl, withLeaflet, Polyline } from "react-leaflet";
import "Leaflet.MultiOptionsPolyline";
import "./L.Polyline.SnakeAnim";
import "./index.css"

class LeafletReactTrackPlayer extends MapControl {
    constructor(props) {
        super(props)
        this.state = {
            activePosition: 0,
            track: [],
        }
    }
    componentDidMount() {
        console.log(this)
    }
    changeActivePosition = (e) => {
        const coordinates = e.target.getBoundingClientRect();
        const activeX = e.pageX;
        const durationTrack = moment(this.props.track[this.props.track.length - 1].t, "YYMMDDHHmmss000") - moment(this.props.track[0].t, "YYMMDDHHmmss000");
        this.setState({
            activePosition: (activeX - coordinates.left) / (this.line.clientWidth / 100)
        }, () => {
            const activePositionTime = moment(this.props.track[0].t, "YYMMDDHHmmss000").add((durationTrack / 100) * this.state.activePosition, "millisecond");
            this.setState({
                track: this.props.track.reduce((result, item) => {
                    if (moment(item.t, "YYMMDDHHmmss000") <= moment(activePositionTime, "YYMMDDHHmmss000")) {
                        result.push(item);
                    }
                    return result;
                }, [])
            })
        })
    }
    pauseTrack = () => {
        this.leafletElement.snakePolyline.snakeStop()
    }
    playTrack = () => {
        this.leafletElement.snakePolyline.snakePlay()
    }
    createLeafletElement() {
        let countPointAnimate = 0
        const createIcon = (rotate) => L.divIcon({
            html: `<div style="background: url('${this.props.markerIcon}') no-repeat center; height: 100%; transform: rotate(${rotate}deg)"></div>`,
            iconSize: [35, 35],
          })
        const finishMarker = L.marker(this.props.track[0], {icon: createIcon(this.props.track[0].course)})
        this.props.leaflet.map.addLayer(finishMarker);
        const snakePolyline = this.props.useMultyPolyline ? 
            L.multiOptionsPolyline(this.props.track, {
                multiOptions: {
                    optionIdxFn: this.props.optionMultyIdxFn,
                    options: this.props.optionsMulty
                },
                snakingSpeed: 10
            }) : L.Polyline(this.props.track);
        this.props.leaflet.map.addLayer(snakePolyline);
        snakePolyline.snakeIn((e) => finishMarker.setLatLng(e), () => {
            countPointAnimate++
            finishMarker.setIcon(createIcon(this.props.track[countPointAnimate].course))
        });
        return {
            snakePolyline, finishMarker
        }
    }
    render() {
        return (
            <div>
                <div className="leaflet-react-track-player">
                    <div className="tp-buttons">
                        <div className="tp_button prev" />
                        <div className="tp_button play" onClick={() => this.playTrack()} />
                        <div className="tp_button stop" onClick={() => this.pauseTrack()} />
                        <div className="tp_button next" />
                    </div>
                    <div className="tp_track-line">
                        <div className="tp_track-line_line" ref={(line) => { this.line = line }} onClick={(e) => this.changeActivePosition(e)}>
                            <div className="tp_track-line_active" style={{ width: `${this.state.activePosition}%` }} />
                        </div>
                    </div>
                </div>
            </div>
        )
    }
}

export default withLeaflet(LeafletReactTrackPlayer);