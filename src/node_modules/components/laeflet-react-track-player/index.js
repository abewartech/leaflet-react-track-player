import React from "react"
import moment from "moment";
import L from 'leaflet';
import { MapControl, withLeaflet } from "react-leaflet";
import { findLastIndex } from "lodash";
import "./multyPolyline";
import "./snake";
import "./index.css"

class LeafletReactTrackPlayer extends MapControl {
    constructor(props) {
        super(props)
        this.state = {
            activePosition: 0,
            track: [],
            active: true,
            activeTimeStamp: props.track[0].t,
            durationTrack: moment(props.track[this.props.track.length - 1].t, "YYMMDDHHmmss000") - moment(props.track[0].t, "YYMMDDHHmmss000")
        }
    }

    componentDidMount() {
        this.leafletElement.snakePolyline.snakeIn({
            fly: (point) => {
                if (point) this.leafletElement.finishMarker.setLatLng(point);
            },
            changeCourse: (point) => {
                const thisDistance = moment(point.t, "YYMMDDHHmmss000") - moment(this.props.track[0].t, "YYMMDDHHmmss000");
                this.setState({ activeTimeStamp: point.t, activePosition: thisDistance / (this.state.durationTrack / 100) });
                this.leafletElement.finishMarker.setIcon(this.createIcon(point.course));
            },
            finish: (lastPosition) => {
                if (lastPosition) {
                    this.setState({ active: false, activeTimeStamp: this.props.track[this.props.track.length - 1].t, activePosition: 100 })
                    this.leafletElement.finishMarker.setLatLng(this.props.track[this.props.track.length - 1]);
                }
                this.setState({ active: false });
            },
            change: (point) => {
                if (point) this.leafletElement.finishMarker.setLatLng(point);
            }
        })
    }

    changeActivePosition = (e) => {
        const coordinates = e.target.getBoundingClientRect();
        const activeX = e.pageX;
        const activePosition = (activeX - coordinates.left) / (this.line.clientWidth / 100)
        const activePositionTime = moment(this.props.track[0].t, "YYMMDDHHmmss000").add((this.state.durationTrack / 100) * activePosition, "millisecond");
        this.leafletElement.snakePolyline.changePosition(activePositionTime.format("YYMMDDHHmmss000"));
    }

    tooglePlay = () => {
        this.setState({
            active: !this.state.active,
        }, () => {
            if (this.state.active) {
                this.leafletElement.snakePolyline.snakePlay();
            } else this.leafletElement.snakePolyline.snakeStop();
        })
    }

    nextStep = () => {
        const indexActiveButton = findLastIndex(this.props.track, (item) => item.t === this.state.activeTimeStamp);
        if (indexActiveButton !== -1 && indexActiveButton !== this.props.track.length - 1) {
            this.leafletElement.snakePolyline.changePosition(this.props.track[indexActiveButton + 1].t)
        }
    };

    prevStep = () => {
        const indexActiveButton = findLastIndex(this.props.track, (item) => item.t === this.state.activeTimeStamp);
        if (indexActiveButton >= 1) {
            this.leafletElement.snakePolyline.changePosition(this.props.track[indexActiveButton - 1].t)
        }
    }

    createLeafletElement() {
        this.createIcon = (rotate) => L.divIcon({
            html: `<div style="background: url('${this.props.markerIcon}') no-repeat center; height: 100%; transform: rotate(${rotate}deg)"></div>`,
            iconSize: [35, 35],
        })
        const finishMarker = L.marker(this.props.track[0], { icon: this.createIcon(this.props.track[0].course) })
        this.props.leaflet.map.addLayer(finishMarker);
        const snakePolyline = L.multiOptionsPolyline(this.props.track, {
            multiOptions: {
                optionIdxFn: this.props.optionMultyIdxFn ? this.props.optionMultyIdxFn : function () { return },
                options: this.props.optionsMulty ? this.props.optionsMulty : [],
            },
            snakingSpeed: 20
        });
        this.props.leaflet.map.addLayer(snakePolyline);
        return {
            snakePolyline, finishMarker
        }
    }

    render() {
        return (
            <div className="leaflet-react-track-player">
                <div className="tp-buttons">
                    <div className="tp_button prev" onClick={() => this.prevStep()} />
                    <div className={`tp_button ${this.state.active ? "pause" : "play"}`} onClick={() => this.tooglePlay()} />
                    <div className="tp_button next" onClick={() => this.nextStep()} />
                    <div className="tp_button speed" />
                </div>
                <div className="tp_track-line">
                    <div className="tp_track-line_line" ref={(line) => { this.line = line }} onClick={(e) => this.changeActivePosition(e)}>
                        <div className="tp_track-line_active" style={{ width: `${this.state.activePosition}%` }} />
                    </div>
                    <div className="tp_track-points" ref={(e) => { this.pointsLine = e }}>
                        {this.props.track.map((item, index) => {
                            const itemDuration = moment(item.t, "YYMMDDHHmmss000") - moment(this.props.track[0].t, "YYMMDDHHmmss000");
                            const procent = itemDuration / (this.state.durationTrack / 100);
                            return <div key={index} className="tp_track-points_item" style={{ left: `${procent}%` }} />
                        })}
                    </div>
                </div>
            </div>
        );
    }
}

export default withLeaflet(LeafletReactTrackPlayer);