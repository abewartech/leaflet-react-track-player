import L from "leaflet";

L.Polyline.include({
	_snakingTimestamp: 0,
	_snakingRings: 0,
	_snakingVertices: 0,
	_snakingDistance: 0,
	_snaking: false,
	_stopTime: 0,
	_play: true,
	_now: 0,
	latLngAnimation: null,
	next: null,

	snakeIn: function (e, n) {
		if (e && !this.latLngAnimation) {
			this.latLngAnimation = e
		}
		if (n && !this.next) {
			this.next = n
		}
		if (this._snaking) { return; }

		if (!('performance' in window) ||
			!('now' in window.performance) ||
			!this._map) {
			return;
		}

		this._snaking = true;
		this._snakingTime = 0;
		this._snakingVertices = this._snakingRings = this._snakingDistance = 0;

		if (!this._snakeLatLngs) {
			this._snakeLatLngs = L.Polyline._flat(this._latlngs) ?
				[this._latlngs] :
				this._latlngs;
		}

		this._latlngs = [[this._snakeLatLngs[0][0], this._snakeLatLngs[0][0]]];
		this._update();
		this._snake();
		this.fire('snakestart');
		return this;
	},

	snakeStop: function () {
		this._play = false;
		this._stopTime = this.now;
		this.stopTime()
	},

	snakePlay: function () {
		this._play = true;
		this._stopTime = 0;
		this.startTime()
		this._snakeForward(this._forward)
	},

	startTime: function() {
		var startTime = Date.now();
		var self = this;
		this.workTime = setInterval(function () {
			var _now = Date.now() - startTime;
			if (this._stopTime) {
				_now = _now + self._stopTime;
			}
			self._now = _now;
		}, 1);
	},

	stopTime: function() {
		this._stopTime = this._now;
		clearInterval(this.workTime)
	},

	_snake: function () {
		var diff = this._now - this._snakingTime;	// In milliseconds
		var forward = diff * this.options.snakingSpeed / 1000;	// In pixels
		this._snakingTime = this._now;
		this._latlngs[this._snakingRings].pop();
		this._forward = forward;
		return this._snakeForward(forward);
	},

	_snakeForward: function (forward) {
		if (!this._now) {
			this.startTime()
		}
		// console.log(this._snakingTime, this._forward, this._snakingDistance)
		if (this._play) {
			var currPoint = this._map.latLngToContainerPoint(
				this._snakeLatLngs[this._snakingRings][this._snakingVertices]);
			var nextPoint = this._map.latLngToContainerPoint(
				this._snakeLatLngs[this._snakingRings][this._snakingVertices + 1]);
			var distance = currPoint.distanceTo(nextPoint);

			if (this._snakingDistance + forward > distance) {
				this._snakingVertices++;
				this._latlngs[this._snakingRings].push(this._snakeLatLngs[this._snakingRings][this._snakingVertices]);

				if (this._snakingVertices >= this._snakeLatLngs[this._snakingRings].length - 1) {
					if (this._snakingRings >= this._snakeLatLngs.length - 1) {
						return this._snakeEnd();
					} else {
						this._snakingVertices = 0;
						this._snakingRings++;
						this._latlngs[this._snakingRings] = [
							this._snakeLatLngs[this._snakingRings][this._snakingVertices]
						];
					}
				}
				this.next()
				this._snakingDistance -= distance;
				return this._snakeForward(forward);
			}
			this._snakingDistance += forward;

			var percent = this._snakingDistance / distance;

			var headPoint = nextPoint.multiplyBy(percent).add(
				currPoint.multiplyBy(1 - percent)
			);

			var headLatLng = this._map.containerPointToLatLng(headPoint);
			this._latlngs[this._snakingRings].push(headLatLng);
			if (this.latLngAnimation) {
				this.latLngAnimation(headLatLng)
			}
			this.setLatLngs(this._latlngs);
			this.fire('snake');
			L.Util.requestAnimFrame(this._snake, this);
		}
	},

	_snakeEnd: function () {

		this.setLatLngs(this._snakeLatLngs);
		this._snaking = false;
		this.fire('snakeend');
		this.next()
	}

});

L.Polyline.mergeOptions({
	snakingSpeed: 200	// In pixels/sec
});

L.LayerGroup.include({
	_snakingLayers: [],
	_snakingLayersDone: 0,
	latLngAnimation: null,
	next: null,

	snakeStop: function () {
		this._snakingLayers.map((item) => {
			if (item._map) {
				item.snakeStop()
			}
		})
	},

	snakePlay: function () {
		this._snakingLayers.map((item, index) => {
			if (item._map && item._snaking) {
				item.snakePlay()
			}
		})
	},

	snakeIn: function (e, n) {
		if (!this.latLngAnimation && e) {
			this.latLngAnimation = e
		}

		if (!this.next && n) {
			this.next = n
		}

		if (!('performance' in window) ||
			!('now' in window.performance) ||
			!this._map ||
			this._snaking) {
			return;
		}
		this._snaking = true;
		this._snakingLayers = [];
		this._snakingLayersDone = 0;
		var keys = Object.keys(this._layers);
		for (var i in keys) {
			var key = keys[i];
			this._snakingLayers.push(this._layers[key]);
		}
		this.clearLayers();
		this.fire('snakestart');
		return this._snakeNext();
	},


	_snakeNext: function () {
		if (this._snakingLayersDone >= this._snakingLayers.length) {
			this.fire('snakeend');
			this._snaking = false;
			return;
		}

		var currentLayer = this._snakingLayers[this._snakingLayersDone];
		this._snakingLayersDone++;
		this.addLayer(currentLayer);
		if ('snakeIn' in currentLayer) {
			currentLayer.once('snakeend', function () {
				setTimeout(this._snakeNext.bind(this), this.options.snakingPause);
			}, this);
			currentLayer.snakeIn(this.latLngAnimation, this.next);
		} else {
			setTimeout(this._snakeNext.bind(this), this.options.snakingPause);
		}

		this.fire('snake');
		return this;
	}
});


L.LayerGroup.mergeOptions({
	snakingPause: 200
});







