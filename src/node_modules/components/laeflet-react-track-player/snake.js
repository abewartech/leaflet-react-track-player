import L from "leaflet";

L.Polyline.include({
	_snakingTimestamp: 0,
	_snakingRings: 0,
	_snakingVertices: 0,
	_snakingDistance: 0,
	_snaking: false,
	_stopTime: 0,
	_play: true,
	_now: 0,
	latLngAnimation: null,

	snakeIn: function (e) {
		if (e && !this.latLngAnimation) this.latLngAnimation = e;
		if (this._snaking) { return; }

		if (!('performance' in window) ||
			!('now' in window.performance) ||
			!this._map) {
			return;
		}
		this._snaking = true;
		this._snakingTime = 0;
		this._snakingVertices = this._snakingRings = this._snakingDistance = 0;
		if (!this._snakeLatLngs) {
			this._snakeLatLngs = L.Polyline._flat(this._latlngs) ?
				[this._latlngs] :
				this._latlngs;
		}
		this._latlngs = [[this._snakeLatLngs[0][0], this._snakeLatLngs[0][0]]];
		this._update();
		this._snake();
		this.fire('snakestart');
		return this;
	},

	changePosition: function (items) {
		if (items.length > 1) {
			this.snakeStop();
			this.setLatLngs(items);
			this._latlngs = [items];
			this._snakingVertices = items.length ? items.length - 1 : 0;
			this._snakingDistance = 0;
			if (items.length === this._snakeLatLngs[0].length) this._snakeEnd();
		}
	},

	snakeStop: function () {
		this._play = false;
		this._stopTime = this._now;
	},

	snakePlay: function () {
		this._play = true;
		this._now = this._snakingTime;
		this.startTime();
		if (this._forward) {
			this._snakeForward(this._forward);
		} else this._snake();

	},

	startTime: function () {
		var startTime = Date.now();
		var self = this;
		const flyTime = function () {
			var _now = Date.now() - startTime + self._stopTime;
			self._now = _now;
			if (self._play) {
				setTimeout(flyTime, 10);
			}
		}
		setTimeout(flyTime, 10);
	},

	_snake: function () {
		if (this._play) {
			var diff = this._now - this._snakingTime;	// In milliseconds
			var forward = diff * this.options.snakingSpeed / 1000;	// In pixels
			this._snakingTime = this._now;
			this._latlngs[this._snakingRings].pop();
			this._forward = forward;
			return this._snakeForward(forward);
		}
	},

	_snakeForward: function (forward) {
		if (!this._now) this.startTime();
		if (this._play && this._map) {
			var currPoint = this._map.latLngToContainerPoint(
				this._snakeLatLngs[this._snakingRings][this._snakingVertices]);
			var nextPoint = this._map.latLngToContainerPoint(
				this._snakeLatLngs[this._snakingRings][this._snakingVertices + 1]);
			var distance = currPoint.distanceTo(nextPoint);
			if (this._snakingDistance + forward > distance) {
				this._snakingVertices++;
				this._latlngs[this._snakingRings].push(this._snakeLatLngs[this._snakingRings][this._snakingVertices]);
				if (this._snakingVertices >= this._snakeLatLngs[0].length - 1) {
					if (this._snakingVertices === this._snakeLatLngs[0].length - 1) {
						return this._snakeEnd();
					} else {
						this._snakingVertices = 0;
						this._snakingRings++;
						this._latlngs[this._snakingRings] = [
							this._snakeLatLngs[this._snakingRings][this._snakingVertices]
						];
					}
				}
				this.changeCourse();
				this._snakingDistance -= distance;
				return this._snakeForward(forward);
			}
			this._snakingDistance += forward;
			var percent = this._snakingDistance / distance;
			var headPoint = nextPoint.multiplyBy(percent).add(
				currPoint.multiplyBy(1 - percent)
			);
			var headLatLng = this._map.containerPointToLatLng(headPoint);
			this._latlngs[this._snakingRings].push(headLatLng);
			if (this.latLngAnimation) {
				this.latLngAnimation(headLatLng, { n: this._snakingVertices, distance: this._snakingDistance + forward });
			}
			this.setLatLngs(this._latlngs);
			this.fire('snake');
			L.Util.requestAnimFrame(this._snake, this);
		}
	},

	changeCourse: function () {
		for (var i in this._eventParents) {
			var countLayer = this._eventParents[i]._snakingLayersDone - 1;
			var point = this._eventParents[i]._detailData[countLayer][this._snakingVertices];
			this._eventParents[i].next(point);
		}
	},

	_snakeEnd: function () {
		this.changeCourse();
		this._play = false;
		this.setLatLngs(this._snakeLatLngs);
		this._snaking = false;
		this.fire('snakeend');
	}
});

L.Polyline.mergeOptions({
	snakingSpeed: 200,	// In pixels/sec
});

L.LayerGroup.include({
	_snakingLayers: [],
	_snakingLayersDone: 0,
	latLngAnimation: null,
	next: null,
	end: null,

	snakeStop: function () {
		this._snakingLayers.map((item) => {
			if (item._map) item.snakeStop();
		})
	},

	snakePlay: function () {
		const findActivePoliline = this._snakingLayers.some((item) => item._map);
		if (!findActivePoliline) {
			this._snakingLayersDone = 0;
			this._snakeNext();
		}
		this._snakingLayers.map((item) => {
			if (!this._snaking) this._snaking = true;
			if (item._map) {
				item.snakePlay();
			}
		});
	},

	changePosition: function (time) {
		var n = null;
		var lastData = null;
		this._detailData.map((item, index) => {
			var filterData = item.filter((itm) => Number(itm.t) <= Number(time));
			if (filterData.length) lastData = filterData;
			if ((filterData.length !== item.length || !filterData.length) && n === null) n = index + 1;
			if (!this._snakingLayers[index]._map && filterData.length > 1) {
				this.addLayer(this._snakingLayers[index]);
				this._snakingLayers[index].snakeIn(this.latLngAnimation);
				this.next(filterData[filterData.length - 1]);
				this.end();
			}
			if (this._snakingLayers[index]._map && filterData.length <= 1) this.removeLayer(this._snakingLayers[index]);
			if (this._snakingLayers[index]._map && filterData.length > 1) this._snakingLayers[index].changePosition(filterData);
		});
		this._snakingLayersDone = n;
		var prevRange = 0;
		var activeRange = 0;
		if (n > 0) {
			prevRange = this._detailDistance.reduce((result, range, index) => {
				if (index < this._snakingLayersDone - 1) result = result + range;
				return result;
			}, 0);
		}
		activeRange = lastData.length >= 2 ? lastData.reduce((result, item, index) => {
			if (index > 0) {
				const currPoint = this._map.latLngToContainerPoint(lastData[index - 1]);
				const nextPoint = this._map.latLngToContainerPoint(item);
				result = result + currPoint.distanceTo(nextPoint);
			}
			return result;
		}, 0) : 0;
		this.callbackChangePosition(lastData[lastData.length - 1], (activeRange + prevRange) / (this._maxDistance / 100));
		this.end();
	},

	snakeIn: function (e, n, end, change) {
		if (!this.callbackChangePosition && change) {
			this.callbackChangePosition = change;
		}
		if (!this.latLngAnimation && e) {
			var self = this
			this.latLngAnimation = function (point, progress) {
				if (progress) {
					var prevRangeColors = 0;
					var activePolylineRange = 0;
					if (self._snakingLayersDone > 1) {
						prevRangeColors = self._detailDistance.reduce((result, range, index) => {
							if (index < self._snakingLayersDone - 1) result = result + range;
							return result;
						}, 0);
					}
					if (progress.n > 0) {
						activePolylineRange = self._detailData[self._snakingLayersDone - 1].reduce((result, point, index) => {
							if (index > 0 && index < progress.n + 1) {
								const currPoint = self._map.latLngToContainerPoint(self._detailData[self._snakingLayersDone - 1][index - 1]);
								const nextPoint = self._map.latLngToContainerPoint(point);
								result = result + currPoint.distanceTo(nextPoint);
							}
							return result;
						}, 0);
					}
					var resultDistance = prevRangeColors + activePolylineRange + progress.distance;
					return e(point, resultDistance / (self._maxDistance / 100));
				}
			}
		}
		if (!this.next && n) this.next = n;
		if (!this.end && end) this.end = end;

		if (!('performance' in window) ||
			!('now' in window.performance) ||
			!this._map ||
			this._snaking) {
			return;
		}
		this._snaking = true;
		this._snakingLayers = [];
		this._snakingLayersDone = 0;
		var keys = Object.keys(this._layers);
		for (var i in keys) {
			var key = keys[i];
			this._snakingLayers.push(this._layers[key]);
		}
		this.clearLayers();
		this._detailDistance = this._detailData.map((polyline) => {
			const distance = polyline.reduce((result, point, index) => {
				if (index > 0) {
					const currPoint = this._map.latLngToContainerPoint(polyline[index - 1]);
					const nextPoint = this._map.latLngToContainerPoint(point);
					result = result + currPoint.distanceTo(nextPoint);
				}
				return result;
			}, 0);
			return distance;
		});
		this._maxDistance = this._detailDistance.reduce((result, item) => {
			result = result + item;
			return result;
		}, 0);
		return this._snakeNext();
	},

	_snakeNext: function () {
		if (this._snakingLayersDone >= this._snakingLayers.length) {
			this.end();
			this._snaking = false;
			return;
		}
		var currentLayer = this._snakingLayers[this._snakingLayersDone];
		this._snakingLayersDone++;
		this.addLayer(currentLayer);
		console.log(this);
		if ('snakeIn' in currentLayer) {
			currentLayer.once('snakeend', function () {
				setTimeout(this._snakeNext.bind(this), this.options.snakingPause);
			}, this);
			currentLayer.snakeIn(this.latLngAnimation);
		} else setTimeout(this._snakeNext.bind(this), this.options.snakingPause);
		return this;
	}
});

L.LayerGroup.mergeOptions({
	snakingPause: 200,
});